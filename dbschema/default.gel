using extension auth;

module default {
  single global current_user := assert_single((
    select User
    filter .identity ?= global ext::auth::ClientTokenIdentity
  ));

  type User {
    required identity: ext::auth::Identity {
      constraint exclusive;
      # When User is deleted, delete the linked Identity
      on source delete delete target;
    };

    email: str {
      constraint exclusive;
      constraint min_len_value(1);
      constraint max_len_value(255);
    };
    full_name: str {
      constraint min_len_value(1);
      constraint max_len_value(255);
    };
    required is_superuser: bool { default := false; };

    access policy superuser_has_full_access
    allow all
    using ((global current_user.is_superuser) ?? false);

    access policy anyone_can_create
    allow insert;

    access policy can_access_self
    allow all
    using (.id ?= global current_user.id);
  };

  type Item {
    required owner: User {
      # When User is deleted, delete all Items
      on target delete delete source;
    };
    title: str {
      constraint min_len_value(1);
      constraint max_len_value(255);
    };
    description: str {
      constraint min_len_value(1);
      constraint max_len_value(255);
    };

    access policy superuser_can_access_all
    allow all
    using ((global current_user.is_superuser) ?? false);

    access policy can_create_item
    allow insert;

    access policy can_access_owned
    allow all
    using (.owner ?= global current_user);
  };
}
