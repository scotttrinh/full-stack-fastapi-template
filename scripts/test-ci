#! /usr/bin/env bash

# Full Stack FastAPI Template - CI Testing
# This script runs all tests in a CI environment with full setup

set -e

echo "🤖 Running Full Stack FastAPI Template Tests (CI Mode)..."

check_dependencies() {
    if ! command -v gel &> /dev/null; then
        echo "❌ Error: 'gel' command not found. Please install Gel first."
        exit 1
    fi
    if ! command -v uv &> /dev/null; then
        echo "❌ Error: 'uv' command not found. Please install uv first."
        exit 1
    fi
    if ! command -v npm &> /dev/null; then
        echo "❌ Error: 'npm' command not found. Please install Node.js first."
        exit 1
    fi
}

install_dependencies() {
    echo ""
    echo "📦 Installing all dependencies..."
    echo "   🐍 Installing backend dependencies..."
    cd backend
    uv sync
    cd ..
    echo "   📦 Installing frontend dependencies..."
    cd frontend
    npm ci
    cd ..
    echo "✅ All dependencies installed"
}

init_gel_project() {
    echo ""
    echo "🗄️  Initializing Gel project for CI..."
    if ! gel project info &>/dev/null; then
        gel project init
        echo "✅ Gel project initialized"
    else
        echo "ℹ️  Gel project already initialized"
    fi
    if [ ! -f ".env" ]; then
        cat > .env << EOF
# CI environment settings
ENVIRONMENT=local
PROJECT_NAME="Full Stack FastAPI Template CI"
GEL_AUTH_SIGNING_KEY=ci-test-key-not-secure
BACKEND_CORS_ORIGINS=http://localhost:5173
EOF
        echo "✅ Created CI .env file"
    fi
    echo "🗄️  Gel daemon ready for CI testing"
}

generate_api_client() {
    echo ""
    echo "🔧 Generating API client..."
    ./scripts/generate-client.sh
    echo "✅ API client generated"
}

run_backend_tests() {
    echo ""
    echo "🐍 Running backend tests..."
    cd backend
    if uv run pytest \
        --cov=app \
        --cov-report=term-missing \
        --cov-report=html \
        --cov-report=xml \
        --junitxml=test-results.xml \
        -v; then
        echo "✅ Backend tests passed"
    else
        echo "❌ Backend tests failed"
        cd ..
        exit 1
    fi
    cd ..
}

run_frontend_tests() {
    echo ""
    echo "📦 Running frontend tests..."
    cd frontend
    if CI=true npm test -- --coverage --watchAll=false; then
        echo "✅ Frontend tests passed"
    else
        echo "❌ Frontend tests failed"
        cd ..
        exit 1
    fi
    cd ..
}

run_type_checking() {
    echo ""
    echo "🔍 Running type checking..."
    echo "   🐍 Backend type checking..."
    cd backend
    if uv run mypy . --junit-xml=mypy-results.xml; then
        echo "   ✅ Backend type checking passed"
    else
        echo "   ❌ Backend type checking failed"
        cd ..
        exit 1
    fi
    cd ..
    echo "   📦 Frontend type checking..."
    cd frontend
    if npm run type-check 2>/dev/null || npx tsc --noEmit; then
        echo "   ✅ Frontend type checking passed"
    else
        echo "   ❌ Frontend type checking failed"
        cd ..
        exit 1
    fi
    cd ..
}

run_linting_and_formatting() {
    echo ""
    echo "🎨 Running code quality checks..."
    echo "   🐍 Backend code quality..."
    cd backend
    if uv run ruff format --check .; then
        echo "   ✅ Backend formatting is correct"
    else
        echo "   ❌ Backend formatting issues found"
        echo "   💡 Run 'uv run ruff format .' to fix"
        cd ..
        exit 1
    fi
    if uv run ruff check .; then
        echo "   ✅ Backend linting passed"
    else
        echo "   ❌ Backend linting failed"
        cd ..
        exit 1
    fi
    cd ..
    echo "   📦 Frontend code quality..."
    cd frontend
    if npm run lint 2>/dev/null || npx eslint src/ --format=junit --output-file=eslint-results.xml; then
        echo "   ✅ Frontend linting passed"
    else
        echo "   ❌ Frontend linting failed"
        cd ..
        exit 1
    fi
    cd ..
}

test_frontend_build() {
    echo ""
    echo "🏗️  Testing frontend build..."
    cd frontend
    if npm run build; then
        echo "✅ Frontend build successful"
    else
        echo "❌ Frontend build failed"
        cd ..
        exit 1
    fi
    cd ..
}

display_summary() {
    echo ""
    echo "🎉 All CI tests completed successfully!"
    echo ""
    echo "📊 CI Test Results Summary:"
    echo "   ✅ Dependencies: INSTALLED"
    echo "   ✅ Backend tests: PASSED"
    echo "   ✅ Frontend tests: PASSED"
    echo "   ✅ Type checking: PASSED"
    echo "   ✅ Code quality: PASSED"
    echo "   ✅ Frontend build: PASSED"
    echo ""
    echo "📁 Artifacts generated:"
    echo "   📊 Backend coverage: backend/htmlcov/index.html"
    echo "   📊 Backend coverage XML: backend/coverage.xml"
    echo "   📋 Backend test results: backend/test-results.xml"
    echo "   📋 Backend mypy results: backend/mypy-results.xml"
    echo "   📦 Frontend build: frontend/dist/"
}

main() {
    check_dependencies
    install_dependencies
    init_gel_project
    generate_api_client
    run_backend_tests
    run_frontend_tests
    run_type_checking
    run_linting_and_formatting
    test_frontend_build
    display_summary
}

main 